include_directories(
    ../src
    ../build
    ../depends/json/single_include)

link_libraries(${GMP_LIB})

add_definitions(${GMP_DEFINIONS})

if(USE_ASM)
    if(ARCH MATCHES "arm64")
            add_definitions(-DUSE_ASM -DARCH_ARM64)
    elseif(ARCH MATCHES "x86_64")
            add_definitions(-DUSE_ASM -DARCH_X86_64)
    endif()
endif()

if(USE_ASM AND ARCH MATCHES "x86_64")

    if (CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin" AND NOT TARGET_PLATFORM MATCHES "^android(_x86_64)?")
        set(NASM_FLAGS -fmacho64 --prefix _)
    else()
        set(NASM_FLAGS -felf64 -DPIC)
    endif()

    add_custom_command(OUTPUT ${CMAKE_SOURCE_DIR}/build/fq_asm.o
        COMMAND nasm ${NASM_FLAGS} fq.asm -o fq_asm.o
        DEPENDS ${CMAKE_SOURCE_DIR}/build/fq.asm
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build)

    add_custom_command(OUTPUT ${CMAKE_SOURCE_DIR}/build/fr_asm.o
        COMMAND nasm ${NASM_FLAGS} fr.asm -o fr_asm.o
        DEPENDS ${CMAKE_SOURCE_DIR}/build/fr.asm
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
endif()

set(FR_SOURCES
    ../build/fr.hpp
    ../build/fr.cpp
    )

if(USE_ASM)
    if(ARCH MATCHES "arm64")
        set(FR_SOURCES ${FR_SOURCES} ../build/fr_raw_arm64.s ../build/fr_raw_generic.cpp ../build/fr_generic.cpp)
    elseif(ARCH MATCHES "x86_64")
        set(FR_SOURCES ${FR_SOURCES} ../build/fr_asm.o)
    endif()
else()
    set(FR_SOURCES ${FR_SOURCES} ../build/fr_generic.cpp ../build/fr_raw_generic.cpp)
endif()

add_library(fr STATIC ${FR_SOURCES})
set_target_properties(fr PROPERTIES POSITION_INDEPENDENT_CODE ON)

link_libraries(fr)


add_executable(tests tests.cpp)
add_executable(test_platform test_platform.cpp)


set(LIB_SOURCES
    calcwit.cpp
    witnesscalc.h
    witnesscalc.cpp
    )

# authV2
set(AUTHV2_SOURCES ${LIB_SOURCES}
    authV2.cpp
    witnesscalc_authV2.h
    witnesscalc_authV2.cpp
    )

add_library(witnesscalc_authV2 SHARED ${AUTHV2_SOURCES})
add_library(witnesscalc_authV2Static STATIC ${AUTHV2_SOURCES})
set_target_properties(witnesscalc_authV2Static PROPERTIES OUTPUT_NAME witnesscalc_authV2)

add_executable(authV2 main.cpp)
target_link_libraries(authV2 witnesscalc_authV2Static)

target_compile_definitions(witnesscalc_authV2 PUBLIC CIRCUIT_NAME=authV2)
target_compile_definitions(witnesscalc_authV2Static PUBLIC CIRCUIT_NAME=authV2)
target_compile_definitions(authV2 PUBLIC CIRCUIT_NAME=authV2)

# credentialAtomicQueryMTPV2
set(CREDENTIALATOMICQUERYMTPV2OFFCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryMTPV2.cpp
    witnesscalc_credentialAtomicQueryMTPV2.h
    witnesscalc_credentialAtomicQueryMTPV2.cpp
    )

add_library(witnesscalc_credentialAtomicQueryMTPV2 SHARED ${CREDENTIALATOMICQUERYMTPV2OFFCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryMTPV2Static STATIC ${CREDENTIALATOMICQUERYMTPV2OFFCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryMTPV2Static PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryMTPV2)

add_executable(credentialAtomicQueryMTPV2 main.cpp)
target_link_libraries(credentialAtomicQueryMTPV2 witnesscalc_credentialAtomicQueryMTPV2Static)

target_compile_definitions(witnesscalc_credentialAtomicQueryMTPV2 PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2)
target_compile_definitions(witnesscalc_credentialAtomicQueryMTPV2Static PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2)
target_compile_definitions(credentialAtomicQueryMTPV2 PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2)

# credentialAtomicQuerySigV2
set(CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQuerySigV2.cpp
    witnesscalc_credentialAtomicQuerySigV2.h
    witnesscalc_credentialAtomicQuerySigV2.cpp
    )

add_library(witnesscalc_credentialAtomicQuerySigV2 SHARED ${CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQuerySigV2Static STATIC ${CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQuerySigV2Static PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQuerySigV2)

add_executable(credentialAtomicQuerySigV2 main.cpp)
target_link_libraries(credentialAtomicQuerySigV2 witnesscalc_credentialAtomicQuerySigV2Static)

target_compile_definitions(witnesscalc_credentialAtomicQuerySigV2 PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2)
target_compile_definitions(witnesscalc_credentialAtomicQuerySigV2Static PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2)
target_compile_definitions(credentialAtomicQuerySigV2 PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2)

# credentialAtomicQueryMTPV2OnChain
set(CREDENTIALATOMICQUERYMTPV2ONCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryMTPV2OnChain.cpp
    witnesscalc_credentialAtomicQueryMTPV2OnChain.h
    witnesscalc_credentialAtomicQueryMTPV2OnChain.cpp
    )

add_library(witnesscalc_credentialAtomicQueryMTPV2OnChain SHARED ${CREDENTIALATOMICQUERYMTPV2ONCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryMTPV2OnChainStatic STATIC ${CREDENTIALATOMICQUERYMTPV2ONCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryMTPV2OnChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryMTPV2OnChain)

add_executable(credentialAtomicQueryMTPV2OnChain main.cpp)
target_link_libraries(credentialAtomicQueryMTPV2OnChain witnesscalc_credentialAtomicQueryMTPV2OnChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQueryMTPV2OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2OnChain)
target_compile_definitions(witnesscalc_credentialAtomicQueryMTPV2OnChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2OnChain)
target_compile_definitions(credentialAtomicQueryMTPV2OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPV2OnChain)

# credentialAtomicQuerySigV2OnChain
set(CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQuerySigV2OnChain.cpp
    witnesscalc_credentialAtomicQuerySigV2OnChain.h
    witnesscalc_credentialAtomicQuerySigV2OnChain.cpp
    )

add_library(witnesscalc_credentialAtomicQuerySigV2OnChain SHARED ${CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQuerySigV2OnChainStatic STATIC ${CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQuerySigV2OnChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQuerySigV2OnChain)

add_executable(credentialAtomicQuerySigV2OnChain main.cpp)
target_link_libraries(credentialAtomicQuerySigV2OnChain witnesscalc_credentialAtomicQuerySigV2OnChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQuerySigV2OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2OnChain)
target_compile_definitions(witnesscalc_credentialAtomicQuerySigV2OnChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2OnChain)
target_compile_definitions(credentialAtomicQuerySigV2OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigV2OnChain)

# credentialAtomicQueryV3
set(CREDENTIALATOMICQUERYV3OFFCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryV3.cpp
    witnesscalc_credentialAtomicQueryV3.h
    witnesscalc_credentialAtomicQueryV3.cpp
    )

add_library(witnesscalc_credentialAtomicQueryV3 SHARED ${CREDENTIALATOMICQUERYV3OFFCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryV3Static STATIC ${CREDENTIALATOMICQUERYV3OFFCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryV3Static PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryV3)

add_executable(credentialAtomicQueryV3 main.cpp)
target_link_libraries(credentialAtomicQueryV3 witnesscalc_credentialAtomicQueryV3Static)

target_compile_definitions(witnesscalc_credentialAtomicQueryV3 PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3)
target_compile_definitions(witnesscalc_credentialAtomicQueryV3Static PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3)
target_compile_definitions(credentialAtomicQueryV3 PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3)

# credentialAtomicQueryV3OnChain
set(CREDENTIALATOMICQUERYV3ONCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryV3OnChain.cpp
    witnesscalc_credentialAtomicQueryV3OnChain.h
    witnesscalc_credentialAtomicQueryV3OnChain.cpp
    )

add_library(witnesscalc_credentialAtomicQueryV3OnChain SHARED ${CREDENTIALATOMICQUERYV3ONCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryV3OnChainStatic STATIC ${CREDENTIALATOMICQUERYV3ONCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryV3OnChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryV3OnChain)

add_executable(credentialAtomicQueryV3OnChain main.cpp)
target_link_libraries(credentialAtomicQueryV3OnChain witnesscalc_credentialAtomicQueryV3OnChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQueryV3OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3OnChain)
target_compile_definitions(witnesscalc_credentialAtomicQueryV3OnChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3OnChain)
target_compile_definitions(credentialAtomicQueryV3OnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryV3OnChain)

# linkedMultiQuery10
# authV2
set(LINKEDMULTIQUERY10_SOURCES ${LIB_SOURCES}
    linkedMultiQuery10.cpp
    witnesscalc_linkedMultiQuery10.h
    witnesscalc_linkedMultiQuery10.cpp
    )

add_library(witnesscalc_linkedMultiQuery10 SHARED ${LINKEDMULTIQUERY10_SOURCES})
add_library(witnesscalc_linkedMultiQuery10Static STATIC ${LINKEDMULTIQUERY10_SOURCES})
set_target_properties(witnesscalc_linkedMultiQuery10Static PROPERTIES OUTPUT_NAME witnesscalc_linkedMultiQuery10)

add_executable(linkedMultiQuery10 main.cpp)
target_link_libraries(linkedMultiQuery10 witnesscalc_linkedMultiQuery10Static)

target_compile_definitions(witnesscalc_linkedMultiQuery10 PUBLIC CIRCUIT_NAME=linkedMultiQuery10)
target_compile_definitions(witnesscalc_linkedMultiQuery10Static PUBLIC CIRCUIT_NAME=linkedMultiQuery10)
target_compile_definitions(linkedMultiQuery10 PUBLIC CIRCUIT_NAME=linkedMultiQuery10)


# proveSha384Sha384Sha384EcdsaBrainpoolP384r1
set(PROVESHA384SHA384SHA384ECDSABRAINPOOLP384r1_SOURCES ${LIB_SOURCES}
    proveSha384Sha384Sha384EcdsaBrainpoolP384r1.cpp
    witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1.h
    witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1.cpp
)

add_library(witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1 SHARED ${PROVESHA384SHA384SHA384ECDSABRAINPOOLP384r1_SOURCES})
add_library(witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1Static STATIC ${PROVESHA384SHA384SHA384ECDSABRAINPOOLP384r1_SOURCES})
set_target_properties(witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1)

add_executable(proveSha384Sha384Sha384EcdsaBrainpoolP384r1 main.cpp)
target_link_libraries(proveSha384Sha384Sha384EcdsaBrainpoolP384r1 witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1)

target_compile_definitions(witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1 PUBLIC CIRCUIT_NAME=proveSha384Sha384Sha384EcdsaBrainpoolP384r1)
target_compile_definitions(witnesscalc_proveSha384Sha384Sha384EcdsaBrainpoolP384r1Static PUBLIC CIRCUIT_NAME=proveSha384Sha384Sha384EcdsaBrainpoolP384r1)
target_compile_definitions(proveSha384Sha384Sha384EcdsaBrainpoolP384r1 PUBLIC CIRCUIT_NAME=proveSha384Sha384Sha384EcdsaBrainpoolP384r1)

# proveSha1Sha1Sha1EcdsaBrainpoolP224r1
set(PROVESHA1SHA1SHA1ECDSABRAINPOOLP224r1_SOURCES ${LIB_SOURCES}
    proveSha1Sha1Sha1EcdsaBrainpoolP224r1.cpp
    witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1.h
    witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1.cpp
)

add_library(witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1 SHARED ${PROVESHA1SHA1SHA1ECDSABRAINPOOLP224r1_SOURCES})
add_library(witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1Static STATIC ${PROVESHA1SHA1SHA1ECDSABRAINPOOLP224r1_SOURCES})
set_target_properties(witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1)

add_executable(proveSha1Sha1Sha1EcdsaBrainpoolP224r1 main.cpp)
target_link_libraries(proveSha1Sha1Sha1EcdsaBrainpoolP224r1 witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1)

target_compile_definitions(witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaBrainpoolP224r1)
target_compile_definitions(witnesscalc_proveSha1Sha1Sha1EcdsaBrainpoolP224r1Static PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaBrainpoolP224r1)
target_compile_definitions(proveSha1Sha1Sha1EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaBrainpoolP224r1)

# proveSha1Sha1Sha1EcdsaSecp256r1
set(PROVESHA1SHA1SHA1ECDSASECP256R1_SOURCES ${LIB_SOURCES}
    proveSha1Sha1Sha1EcdsaSecp256r1.cpp
    witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1.h
    witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1.cpp
)

add_library(witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1 SHARED ${PROVESHA1SHA1SHA1ECDSASECP256R1_SOURCES})
add_library(witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1Static STATIC ${PROVESHA1SHA1SHA1ECDSASECP256R1_SOURCES})
set_target_properties(witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1)

add_executable(proveSha1Sha1Sha1EcdsaSecp256r1 main.cpp)
target_link_libraries(proveSha1Sha1Sha1EcdsaSecp256r1 witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1)

target_compile_definitions(witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaSecp256r1)
target_compile_definitions(witnesscalc_proveSha1Sha1Sha1EcdsaSecp256r1Static PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaSecp256r1)
target_compile_definitions(proveSha1Sha1Sha1EcdsaSecp256r1 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1EcdsaSecp256r1)

# proveSha1Sha1Sha1Rsa655374096
set(PROVESHA1SHA1SHA1RSA655374096_SOURCES ${LIB_SOURCES}
    proveSha1Sha1Sha1Rsa655374096.cpp
    witnesscalc_proveSha1Sha1Sha1Rsa655374096.h
    witnesscalc_proveSha1Sha1Sha1Rsa655374096.cpp
)

add_library(witnesscalc_proveSha1Sha1Sha1Rsa655374096 SHARED ${PROVESHA1SHA1SHA1RSA655374096_SOURCES})
add_library(witnesscalc_proveSha1Sha1Sha1Rsa655374096Static STATIC ${PROVESHA1SHA1SHA1RSA655374096_SOURCES})
set_target_properties(witnesscalc_proveSha1Sha1Sha1Rsa655374096Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha1Sha1Sha1Rsa655374096)

add_executable(proveSha1Sha1Sha1Rsa655374096 main.cpp)
target_link_libraries(proveSha1Sha1Sha1Rsa655374096 witnesscalc_proveSha1Sha1Sha1Rsa655374096)

target_compile_definitions(witnesscalc_proveSha1Sha1Sha1Rsa655374096 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1Rsa655374096)
target_compile_definitions(witnesscalc_proveSha1Sha1Sha1Rsa655374096Static PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1Rsa655374096)
target_compile_definitions(proveSha1Sha1Sha1Rsa655374096 PUBLIC CIRCUIT_NAME=proveSha1Sha1Sha1Rsa655374096)

# proveSha1Sha256Sha256Rsa655374096
set(PROVESHA1SHA256SHA256RSA655374096_SOURCES ${LIB_SOURCES}
    proveSha1Sha256Sha256Rsa655374096.cpp
    witnesscalc_proveSha1Sha256Sha256Rsa655374096.h
    witnesscalc_proveSha1Sha256Sha256Rsa655374096.cpp
)

add_library(witnesscalc_proveSha1Sha256Sha256Rsa655374096 SHARED ${PROVESHA1SHA256SHA256RSA655374096_SOURCES})
add_library(witnesscalc_proveSha1Sha256Sha256Rsa655374096Static STATIC ${PROVESHA1SHA256SHA256RSA655374096_SOURCES})
set_target_properties(witnesscalc_proveSha1Sha256Sha256Rsa655374096Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha1Sha256Sha256Rsa655374096)

add_executable(proveSha1Sha256Sha256Rsa655374096 main.cpp)
target_link_libraries(proveSha1Sha256Sha256Rsa655374096 witnesscalc_proveSha1Sha256Sha256Rsa655374096)

target_compile_definitions(witnesscalc_proveSha1Sha256Sha256Rsa655374096 PUBLIC CIRCUIT_NAME=proveSha1Sha256Sha256Rsa655374096)
target_compile_definitions(witnesscalc_proveSha1Sha256Sha256Rsa655374096Static PUBLIC CIRCUIT_NAME=proveSha1Sha256Sha256Rsa655374096)
target_compile_definitions(proveSha1Sha256Sha256Rsa655374096 PUBLIC CIRCUIT_NAME=proveSha1Sha256Sha256Rsa655374096)

# proveSha256Sha224Sha224EcdsaBrainpoolP224r1
set(PROVESHA256SHA224SHA224ECDSABRAINPOOLP224R1_SOURCES ${LIB_SOURCES}
    proveSha256Sha224Sha224EcdsaBrainpoolP224r1.cpp
    witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1.h
    witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1.cpp
)

add_library(witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1 SHARED ${PROVESHA256SHA224SHA224ECDSABRAINPOOLP224R1_SOURCES})
add_library(witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1Static STATIC ${PROVESHA256SHA224SHA224ECDSABRAINPOOLP224R1_SOURCES})
set_target_properties(witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1)

add_executable(proveSha256Sha224Sha224EcdsaBrainpoolP224r1 main.cpp)
target_link_libraries(proveSha256Sha224Sha224EcdsaBrainpoolP224r1 witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1)

target_compile_definitions(witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha256Sha224Sha224EcdsaBrainpoolP224r1)
target_compile_definitions(witnesscalc_proveSha256Sha224Sha224EcdsaBrainpoolP224r1Static PUBLIC CIRCUIT_NAME=proveSha256Sha224Sha224EcdsaBrainpoolP224r1)
target_compile_definitions(proveSha256Sha224Sha224EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha256Sha224Sha224EcdsaBrainpoolP224r1)

# proveSha256Sha256Sha256EcdsaBrainpoolP224r1
set(PROVESHA256SHA256SHA256ECDSABRAINPOOLP224R1_SOURCES ${LIB_SOURCES}
    proveSha256Sha256Sha256EcdsaBrainpoolP224r1.cpp
    witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1.h
    witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1.cpp
)

add_library(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1 SHARED ${PROVESHA256SHA256SHA256ECDSABRAINPOOLP224R1_SOURCES})
add_library(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1Static STATIC ${PROVESHA256SHA256SHA256ECDSABRAINPOOLP224R1_SOURCES})
set_target_properties(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1)

add_executable(proveSha256Sha256Sha256EcdsaBrainpoolP224r1 main.cpp)
target_link_libraries(proveSha256Sha256Sha256EcdsaBrainpoolP224r1 witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1)

target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP224r1)
target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP224r1Static PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP224r1)
target_compile_definitions(proveSha256Sha256Sha256EcdsaBrainpoolP224r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP224r1)

# proveSha256Sha256Sha256EcdsaBrainpoolP256r1
set(PROVESHA256SHA256SHA256ECDSABRAINPOOLP256R1_SOURCES ${LIB_SOURCES}
    proveSha256Sha256Sha256EcdsaBrainpoolP256r1.cpp
    witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1.h
    witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1.cpp
)

add_library(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1 SHARED ${PROVESHA256SHA256SHA256ECDSABRAINPOOLP256R1_SOURCES})
add_library(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1Static STATIC ${PROVESHA256SHA256SHA256ECDSABRAINPOOLP256R1_SOURCES})
set_target_properties(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1)

add_executable(proveSha256Sha256Sha256EcdsaBrainpoolP256r1 main.cpp)
target_link_libraries(proveSha256Sha256Sha256EcdsaBrainpoolP256r1 witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1)

target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP256r1)
target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaBrainpoolP256r1Static PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP256r1)
target_compile_definitions(proveSha256Sha256Sha256EcdsaBrainpoolP256r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaBrainpoolP256r1)

# proveSha256Sha256Sha256EcdsaSecp256r1
set(PROVESHA256SHA256SHA256ECDSASECP256R1_SOURCES ${LIB_SOURCES}
    proveSha256Sha256Sha256EcdsaSecp256r1.cpp
    witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1.h
    witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1.cpp
)

add_library(witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1 SHARED ${PROVESHA256SHA256SHA256ECDSASECP256R1_SOURCES})
add_library(witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1Static STATIC ${PROVESHA256SHA256SHA256ECDSASECP256R1_SOURCES})
set_target_properties(witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1Static PROPERTIES OUTPUT_NAME witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1)

add_executable(proveSha256Sha256Sha256EcdsaSecp256r1 main.cpp)
target_link_libraries(proveSha256Sha256Sha256EcdsaSecp256r1 witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1)

target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaSecp256r1)
target_compile_definitions(witnesscalc_proveSha256Sha256Sha256EcdsaSecp256r1Static PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaSecp256r1)
target_compile_definitions(proveSha256Sha256Sha256EcdsaSecp256r1 PUBLIC CIRCUIT_NAME=proveSha256Sha256Sha256EcdsaSecp256r1)
